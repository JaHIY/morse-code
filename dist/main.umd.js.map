{"version":3,"file":"main.umd.js","sources":["../src/main.js"],"sourcesContent":["import R from \"ramda\";\n\n// The morseTable is from https://github.com/hustcc/xmorse\nconst morseTable = {\n      /* Letters                               */\n        \"A\": \"01\",      /* A                   */\n        \"B\": \"1000\",    /* B                   */\n        \"C\": \"1010\",    /* C                   */\n        \"D\": \"100\",     /* D                   */\n        \"E\": \"0\",       /* E                   */\n        \"F\": \"0010\",    /* F                   */\n        \"G\": \"110\",     /* G                   */\n        \"H\": \"0000\",    /* H                   */\n        \"I\": \"00\",      /* I                   */\n        \"J\": \"0111\",    /* J                   */\n        \"K\": \"101\",     /* K                   */\n        \"L\": \"0100\",    /* L                   */\n        \"M\": \"11\",      /* M                   */\n        \"N\": \"10\",      /* N                   */\n        \"O\": \"111\",     /* O                   */\n        \"P\": \"0110\",    /* P                   */\n        \"Q\": \"1101\",    /* Q                   */\n        \"R\": \"010\",     /* R                   */\n        \"S\": \"000\",     /* S                   */\n        \"T\": \"1\",       /* T                   */\n        \"U\": \"001\",     /* U                   */\n        \"V\": \"0001\",    /* V                   */\n        \"W\": \"011\",     /* W                   */\n        \"X\": \"1001\",    /* X                   */\n        \"Y\": \"1011\",    /* Y                   */\n        \"Z\": \"1100\",    /* Z                   */\n      /* Numbers                               */\n        \"0\": \"11111\",   /* 0                   */\n        \"1\": \"01111\",   /* 1                   */\n        \"2\": \"00111\",   /* 2                   */\n        \"3\": \"00011\",   /* 3                   */\n        \"4\": \"00001\",   /* 4                   */\n        \"5\": \"00000\",   /* 5                   */\n        \"6\": \"10000\",   /* 6                   */\n        \"7\": \"11000\",   /* 7                   */\n        \"8\": \"11100\",   /* 8                   */\n        \"9\": \"11110\",   /* 9                   */\n      /* Punctuation                           */\n        \".\": \"010101\",  /* Full stop           */\n        \",\": \"110011\",  /* Comma               */\n        \"?\": \"001100\",  /* Question mark       */\n        \"'\": \"011110\",  /* Apostrophe          */\n        \"!\": \"101011\",  /* Exclamation mark    */\n        \"/\": \"10010\",   /* Slash               */\n        \"(\": \"10110\",   /* Left parenthesis    */\n        \")\": \"101101\",  /* Right parenthesis   */\n        \"&\": \"01000\",   /* Ampersand           */\n        \":\": \"111000\",  /* Colon               */\n        \";\": \"101010\",  /* Semicolon           */\n        \"=\": \"10001\",   /* Equal sign          */\n        \"+\": \"01010\",   /* Plus sign           */\n        \"-\": \"100001\",  /* Hyphen1minus        */\n        \"_\": \"001101\",  /* Low line            */\n        \"\\\"\": \"010010\", /* Quotation mark      */\n        \"$\": \"0001001\", /* Dollar sign         */\n        \"@\": \"011010\",  /* At sign             */\n};\n\nconst reverseMorseTable = R.invertObj(morseTable);\n\nconst convertUnicodeToMorseBinary = ch => ch.charCodeAt(0).toString(2);\n\nconst convertMorseBinaryToUnicode = bin => String.fromCharCode(parseInt(bin, 2));\n\nconst defaultOptions = {\n    delimiter: \"/\",\n    short: \".\",\n    long: \"-\"\n};\n\n/**\n *  @since 0.0.1\n *\n *  Returns the morse code of message passed to the function.\n *\n *  @example <caption>ascii</caption>\n *  encodeMorseCode(\"I have an apple.\")\n *\n *  @example <caption>unicode</caption>\n *  encodeMorseCode(\"もぎゅっと“love”で接近中！\")\n *\n *  @example <caption>options</caption>\n *  const options = {\n *      long: \"2\",\n *      short: \"1\",\n *      delimiter: \"0\",\n *  };\n *  encodeMorseCode(\"爱してるばんざーい！\", options);\n *\n *  @param {!string} msg - original message\n *  @param {!Object} [options={}] - optional config\n *  @param {!string} [options.long=\"-\"] - the long signal in morse code\n *  @param {!string} [options.short=\".\"] - the short signal in morse code\n *  @param {!string} [options.delimiter=\"/\"] - the delimiter in morse code\n *  @return {!string} morse code\n */\nexport function encodeMorseCode(\n    msg,\n    {\n        long = defaultOptions.long,\n        short = defaultOptions.short,\n        delimiter = defaultOptions.delimiter\n    } = {}\n) {\n    const codeList = [\n        short,\n        long,\n        delimiter,\n    ];\n\n    return R.compose(\n        R.join(\"\"),\n        R.map(R.nth(R.__, codeList)),\n        R.split(\"\"),\n        R.join(\"2\"),\n        R.map(\n            R.ifElse(\n                R.has(R.__, morseTable),\n                R.prop(R.__, morseTable),\n                convertUnicodeToMorseBinary\n            )\n        ),\n        R.split(\"\"),\n        R.toUpper,\n        R.replace(/\\s+/g, \"\")\n    )(msg);\n}\n\n/**\n *  @since 0.0.1\n *\n *  Returns the original message of morse code passed to the function.\n *\n *  @example <caption>ascii</caption>\n *  decodeMorseCode(\"../..../.-/...-/./.-/.--././-./.-.-.-\")\n *\n *  @example <caption>unicode</caption>\n *  decodeMorseCode(\"--....--.-----/--.....--.----/---..---../.----./.../../-.-./--.....--.---./--....--.-----\")\n *\n *  @example <caption>options</caption>\n *  const options = {\n *      long: \"2\",\n *      short: \"1\",\n *      delimiter: \"0\",\n *  };\n *  decodeMorseCode(\"222112221101222210111\", options);\n *\n *  @param {!string} morseCode - morse code\n *  @param {!Object} [options={}] - optional config\n *  @param {!string} [options.long=\"-\"] - the long signal in morse code\n *  @param {!string} [options.short=\".\"] - the short signal in morse code\n *  @param {!string} [options.delimiter=\"/\"] - the delimiter in morse code\n *  @return {!string} original code\n */\nexport function decodeMorseCode(\n    morseCode,\n    {\n        long = defaultOptions.long,\n        short = defaultOptions.short,\n        delimiter = defaultOptions.delimiter\n    } = {}\n) {\n    const codeTable = {\n        [short]: 0,\n        [long]: 1,\n        [delimiter]: 2,\n    };\n\n    return R.compose(\n        R.join(\"\"),\n        R.map(\n            R.ifElse(\n                R.has(R.__, reverseMorseTable),\n                R.prop(R.__, reverseMorseTable),\n                convertMorseBinaryToUnicode,\n            )\n        ),\n        R.split(\"2\"),\n        R.join(\"\"),\n        R.map(\n            R.ifElse(\n                R.has(R.__, codeTable),\n                R.prop(R.__, codeTable),\n                R.always(\"\")\n            )\n        ),\n        R.split(\"\")\n    )(morseCode);\n}\n"],"names":["morseTable","reverseMorseTable","R","invertObj","convertUnicodeToMorseBinary","ch","charCodeAt","toString","convertMorseBinaryToUnicode","String","fromCharCode","parseInt","bin","defaultOptions","encodeMorseCode","msg","long","short","delimiter","codeList","compose","join","map","nth","__","split","ifElse","has","prop","toUpper","replace","decodeMorseCode","morseCode","codeTable","always"],"mappings":"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"}